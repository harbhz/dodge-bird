{
  "version": 3,
  "sources": ["../helper.ts"],
  "sourcesContent": ["// Simple error reporting without external dependencies\nwindow.addEventListener(\"error\", (e) => {\n    fetch(\"/error\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            msg: e.error?.message || \"Unknown error\",\n            stack: [{\n                file: e.filename || \"unknown\",\n                line: e.lineno || 0,\n                col: e.colno || 0\n            }]\n        }),\n    }).catch(() => {\n        console.error(\"Failed to report error to server\");\n    });\n});\n\ninterface User {\n    id: string;\n    name: string;\n}\n\ninterface Replit {\n    getUser(): Promise<User | null>;\n    auth(): Promise<User | null>;\n    getUserOrAuth(): Promise<User | null>;\n    getData<D = any>(key: string, def?: D): Promise<D>;\n    setData<D>(key: string, val: D): Promise<D>;\n    delData(key: string): Promise<void>;\n    listData(): Promise<string[]>;\n    clearData(): Promise<void>;\n}\n\n// Enhanced Replit integration\nconst replit: Replit = {\n    getUser(): Promise<User | null> {\n        return fetch(\"/user\")\n            .then((res) => res.json())\n            .then((user) => user || null)\n            .catch(() => null);\n    },\n\n    auth(): Promise<User | null> {\n        return new Promise((resolve) => {\n            const authComplete = (e: MessageEvent) => {\n                if (e.data !== \"auth_complete\") {\n                    resolve(null);\n                    return;\n                }\n                window.removeEventListener(\"message\", authComplete);\n                if (authWindow && !authWindow.closed) {\n                    authWindow.close();\n                }\n                this.getUser().then(resolve);\n            };\n\n            window.addEventListener(\"message\", authComplete);\n\n            const w = 320;\n            const h = 480;\n            const left = (screen.width / 2) - (w / 2);\n            const top = (screen.height / 2) - (h / 2);\n\n            const authWindow = window.open(\n                `https://repl.it/auth_with_repl_site?domain=${location.host}`,\n                \"_blank\",\n                `modal=yes, toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${w}, height=${h}, top=${top}, left=${left}`\n            );\n\n            if (!authWindow) {\n                console.error(\"Popup blocked - unable to open auth window\");\n                resolve(null);\n                return;\n            }\n\n            setTimeout(() => {\n                if (authWindow && !authWindow.closed) {\n                    authWindow.close();\n                }\n                window.removeEventListener(\"message\", authComplete);\n                resolve(null);\n            }, 30000);\n        });\n    },\n\n    getUserOrAuth(): Promise<User | null> {\n        return this.getUser().then((user) => {\n            if (user) {\n                return user;\n            } else {\n                return this.auth();\n            }\n        });\n    },\n\n    getData<D = any>(key: string, def?: D): Promise<D> {\n        return fetch(`/db/${encodeURIComponent(key)}`)\n            .then((res) => res.json())\n            .then((val) => {\n                if (val == null && def !== undefined) {\n                    return this.setData(key, def);\n                }\n                return val;\n            })\n            .catch(() => {\n                if (def !== undefined) {\n                    return def;\n                }\n                throw new Error(`Failed to get data for key: ${key}`);\n            });\n    },\n\n    setData<D>(key: string, val: D): Promise<D> {\n        return fetch(`/db/${encodeURIComponent(key)}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(val),\n        }).then((res) => {\n            if (!res.ok) {\n                throw new Error(`Failed to set data for key: ${key}`);\n            }\n            return val;\n        });\n    },\n\n    delData(key: string): Promise<void> {\n        return fetch(`/db/${encodeURIComponent(key)}`, {\n            method: \"DELETE\",\n        }).then((res) => {\n            if (!res.ok) {\n                throw new Error(`Failed to delete data for key: ${key}`);\n            }\n        });\n    },\n\n    listData(): Promise<string[]> {\n        return fetch(`/db`)\n            .then((res) => res.json())\n            .catch(() => []);\n    },\n\n    clearData(): Promise<void> {\n        return fetch(`/db`, {\n            method: \"DELETE\",\n        }).then((res) => {\n            if (!res.ok) {\n                throw new Error(\"Failed to clear data\");\n            }\n        });\n    },\n};\n\n// Use type assertion to add replit to window\n(window as any).replit = replit;\n"],
  "mappings": "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",
  "names": []
}
